// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package data generated by go-bindata.// sources:
// pkg/templates/harvester-seeder.yaml
// pkg/templates/nvidia-driver-toolkit.yaml
// pkg/templates/pcidevices-controller.yaml
// pkg/templates/rancher-logging.yaml
// pkg/templates/rancher-monitoring.yaml
// pkg/templates/vm-import-controller.yaml
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgTemplatesHarvesterSeederYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xb1\x6e\xf3\x30\x0c\x84\x77\x3d\x05\xe1\x3d\xf2\xef\x55\xdb\x8f\xa2\x73\xb7\xae\x05\x63\x5d\x62\xa1\xb2\x6c\x88\xb4\xd0\xc2\xcd\xbb\x17\x56\x12\xa4\x29\xd2\x89\x86\xef\x3e\x9e\x0e\xe4\x39\xbc\x22\x4b\x98\x92\xa3\x81\x73\x81\x28\xf2\xd0\x07\x1b\xa6\xb6\x74\x7b\x28\x77\xe6\x3d\x24\xef\xe8\xbf\xf7\x53\x32\x23\x94\x3d\x2b\x3b\x43\x94\x78\xc4\x0f\x6a\x27\x80\x47\xbe\x08\x32\x73\x7f\xaf\x7e\x8a\x62\x34\x91\xf7\x88\xb2\xe1\xbc\x2d\xb4\xbf\x43\xf1\x31\x23\x87\x11\x49\x39\x3a\x6a\x34\x2f\x68\x8c\xcc\xe8\x37\x24\x63\x9e\x1c\x0d\xaa\xb3\x6b\xdb\xdb\xea\x3e\x2e\x75\x6e\xb2\xed\x59\x35\xe2\x12\x67\xa5\xf4\x6d\x3f\x70\x56\x31\x44\xe5\xda\xb4\xf9\x67\x3b\xdb\x35\x86\xa8\x6a\x0f\x4b\xac\xeb\x8e\xc2\x81\x38\x79\xb2\xb5\xbb\x5c\xe7\xed\xcd\x6f\x67\xf7\xe9\x64\x88\x90\x78\x1f\xe1\x1d\xad\xeb\x9f\x46\xfb\x7c\x36\x51\x25\xb6\x04\x44\x01\xdd\xf3\x07\x8e\x82\xab\x9c\x2e\xde\xc2\x71\x81\x3c\x4d\x49\x91\xd4\xd1\x97\x21\x22\x0a\x23\x1f\xe1\xea\x27\x91\xf2\xd1\x51\xa9\xc5\xea\x9f\xc3\x12\xe3\x76\x88\x97\x82\x9c\x83\x7f\x70\xa9\xef\x00\x00\x00\xff\xff\x42\x3b\xd1\x52\xfc\x01\x00\x00")

func pkgTemplatesHarvesterSeederYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesHarvesterSeederYaml,
		"pkg/templates/harvester-seeder.yaml",
	)
}

func pkgTemplatesHarvesterSeederYaml() (*asset, error) {
	bytes, err := pkgTemplatesHarvesterSeederYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/harvester-seeder.yaml", size: 508, mode: os.FileMode(420), modTime: time.Unix(1713401216, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesNvidiaDriverToolkitYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x8a\xdb\x30\x10\xbe\xeb\x29\x06\xdf\x25\xd7\x50\x96\xa2\xdb\xd2\x5d\x68\x60\xc9\xee\x21\xe4\x1a\x26\xd2\x24\x16\x91\x25\x23\x8d\x45\x8a\x9b\x77\x2f\xfe\x09\x4d\x5b\xda\xd3\x08\x7d\x3f\x9a\xf9\x46\xd8\xbb\x3d\xa5\xec\x62\xd0\xd0\x62\x2a\x94\x99\x52\x6b\x9c\x72\xb1\x2e\xcd\x91\x18\x1b\x71\x71\xc1\x6a\x78\xb6\x36\x06\xd1\x11\xa3\x45\x46\x2d\x00\x02\x76\xa4\x21\x14\x67\x1d\x4a\x9b\x5c\xa1\x24\x39\x46\x7f\x71\xbc\xa2\xb9\x47\x43\x0f\xc6\x32\x7f\xcf\x4c\x9d\xc8\x3d\x99\xc9\x21\x51\x1f\x35\xb4\xcc\xbd\xae\xeb\x5f\x2c\xe3\x87\xb9\x4e\xb0\x32\xc8\xec\x69\x55\xaa\x5c\x4c\x6d\x5a\x4c\x9c\x05\x40\xb9\x77\x5e\x7d\x52\x8d\x6a\x2a\x01\x30\x63\x7f\x36\x95\x86\xc0\xae\x23\x01\x30\x8e\x12\xdc\x09\x30\x58\x50\xf3\x40\xf9\x5e\xd5\x22\x39\x2c\x92\xc3\x3a\xc7\xed\x26\x00\x28\xe0\xd1\x93\xd5\x30\x8e\xff\x67\xab\xd7\x85\x09\xb3\x6c\x7a\x8b\x7c\x26\xf8\xdd\xe4\x84\x3e\xdf\x5b\xa1\xb0\x72\x0b\xfa\x81\xf2\xd7\x18\x98\x02\x6b\xf8\x21\x00\x00\x5c\x87\x67\xd2\xf3\x11\x80\xf1\xac\x21\x7b\x92\x9d\x33\x29\xca\x96\xd0\xae\xc8\x12\x62\xc2\x60\x5a\x4a\x0f\x29\xfe\x6b\x31\x00\xcb\xd5\x5b\x34\xc8\x73\x7c\x50\x7d\xdb\xed\x3e\x5e\xb7\x2f\x1f\xef\x9b\xed\xae\xde\xee\x37\x2f\x9b\x67\xf9\xe6\xc2\x70\x95\xd7\x2f\x4f\x87\xa7\xcf\xb2\x9c\xfb\x41\x5e\x4a\xa7\xd2\x10\x2a\x98\x5d\x4e\x83\xf7\xd3\x92\xdf\x0b\xa5\xe4\xec\x5f\x5f\x61\x4d\xfd\x67\x00\x00\x00\xff\xff\x12\xfd\xb7\x13\x62\x02\x00\x00")

func pkgTemplatesNvidiaDriverToolkitYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesNvidiaDriverToolkitYaml,
		"pkg/templates/nvidia-driver-toolkit.yaml",
	)
}

func pkgTemplatesNvidiaDriverToolkitYaml() (*asset, error) {
	bytes, err := pkgTemplatesNvidiaDriverToolkitYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/nvidia-driver-toolkit.yaml", size: 610, mode: os.FileMode(420), modTime: time.Unix(1713401242, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesPcidevicesControllerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xb1\x4e\x33\x31\x10\x84\x7b\x3f\xc5\x28\x7d\x7c\x7f\x7e\x3a\x77\x08\x51\xd3\xd1\x46\x1b\x7b\x93\xb3\xf0\xd9\x27\xef\xc6\x12\x3a\xf2\xee\xe8\x2e\x09\x89\x90\x10\x54\x6b\x79\xf6\x1b\x8f\x77\x69\x8c\xaf\x5c\x25\x96\xec\xd0\x53\x6d\x2c\xca\xb5\xf7\xd1\xc6\xd2\xb5\xcd\x8e\x95\x36\xe6\x2d\xe6\xe0\xf0\x18\x42\xc9\x66\x60\xa5\x40\x4a\xce\x00\x99\x06\x76\x18\x7d\x0c\xdc\xa2\x67\x59\xfb\x92\xb5\x96\x94\xb8\x5e\x54\x19\xc9\xf3\x9d\xf1\x5a\xde\x45\x79\x30\x32\xb2\x9f\x1d\x2a\x8f\xc5\xa1\x57\x1d\x5d\xd7\xdd\xba\x7c\x3a\x2e\x75\x96\xad\x27\xd5\xc4\x17\xd2\x4a\xf3\x9d\xef\xa9\xaa\x18\xa0\x5d\x93\xaf\xfe\xd9\x07\xfb\x7f\x65\x80\x45\xbb\x7f\xf1\xa7\x78\xd3\xb4\x46\xdc\x83\x72\x80\x5d\xbe\x26\xd7\x6a\xbf\xe0\xed\x0d\xde\xde\x60\x9c\x4e\x06\xe0\x4c\xbb\xc4\xc1\x61\x9a\xfe\x0a\xda\xe7\x33\x73\x36\x98\x03\x70\x12\xfe\x66\xb7\xa7\x24\x7c\x95\xf3\xa5\xb7\x51\x3a\xb2\x3c\x95\xac\x9c\xd5\xe1\xc3\x00\x40\x1c\xe8\xc0\x6e\x39\x02\x4a\x07\x87\xb6\x8c\x61\xb9\xd9\x1f\x53\x9a\x37\xf0\xd2\xb8\xd6\x18\xf8\xd7\x91\x7c\x06\x00\x00\xff\xff\xfc\xa9\x8c\x9a\x09\x02\x00\x00")

func pkgTemplatesPcidevicesControllerYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesPcidevicesControllerYaml,
		"pkg/templates/pcidevices-controller.yaml",
	)
}

func pkgTemplatesPcidevicesControllerYaml() (*asset, error) {
	bytes, err := pkgTemplatesPcidevicesControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/pcidevices-controller.yaml", size: 521, mode: os.FileMode(420), modTime: time.Unix(1713401109, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesRancherLoggingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x10\xbe\x0e\xfe\x4a\x51\x6c\xd0\xad\x18\xba\x53\xdb\x15\x6b\xb1\xeb\xc0\x48\xb4\xad\x45\x96\x3c\x89\xf6\x5a\x64\xfd\xef\x83\x3f\x92\x38\x5b\xd2\x75\x27\xb7\xe4\x7b\xe4\x23\x1f\x23\x6c\xf5\x57\xf2\x41\x3b\x2b\xa0\x46\xdf\x53\x60\xf2\xb5\xd4\xa9\x76\x59\x5f\xac\x89\xb1\x88\x36\xda\x2a\x01\x57\x4a\x39\x1b\x35\xc4\xa8\x90\x51\x44\x00\x16\x1b\x12\xe0\xd1\xca\x9a\x7c\x62\x5c\x55\x69\x5b\xcd\xf1\xd0\xa2\x24\x01\x12\x99\x0d\xed\x72\x49\x78\x0e\x4c\x4d\x14\x5a\x92\x43\x01\x4f\xad\x13\x50\x33\xb7\x22\xcb\xf6\xdd\x13\x69\xba\xf1\x3b\xa4\xd3\xb9\xc2\xc4\x4c\x43\x2f\x33\x59\xa3\xe7\x10\x01\xf4\x3b\xe1\x71\x91\x5f\xa4\x79\x9a\xbf\xeb\xda\x8b\xb4\x78\x9f\x16\x79\x1c\x01\x8c\xb8\x53\xfa\xb6\xdb\x04\x74\x09\x68\x15\xa4\xe3\x54\x61\xf7\x4d\x67\xf0\xb7\x19\x0c\x2f\x2f\x11\x00\x59\x5c\x1b\x52\x02\xb6\xdb\x73\xc0\xf4\x7a\xc2\x4c\x84\xa1\x01\x99\x40\x7f\xd0\x4b\x34\x81\x76\x69\x3b\x63\x7b\x34\x1d\x85\x8f\xce\x32\x59\x16\xf0\x2b\x02\x00\x98\xa6\x55\x37\xae\xba\x47\xae\x05\x64\x3d\xfa\xcc\xb8\x2a\xfb\xee\x3a\x6f\xd1\x8c\x20\xa5\xc3\x50\xf8\xbe\x97\x02\xd8\x77\x34\x06\x51\x29\xcd\xda\x59\x34\x37\x93\xb2\x07\xd7\x79\x49\x41\x8c\x59\x00\xbf\xa1\xd5\xee\xef\x85\xb4\x3d\x1f\x60\xd3\xad\xe9\xaa\x53\x9a\x5f\x87\x01\xe0\x00\xfa\xa4\x0d\x4d\x77\x10\x8f\xff\xa7\xc6\x55\xf1\x1e\xd2\x22\xd7\xf7\x9e\x4a\xfd\x24\x20\x9e\x86\xd0\xeb\x6c\xde\x5d\x36\x68\xc9\x02\xf9\x9e\xc6\xe1\x42\x76\x20\xce\x6b\xfd\x42\xa5\x80\xf8\x70\x19\x83\xb6\x64\xec\x33\xd8\x99\x78\x2a\x0f\x94\xd2\x74\x64\x79\xbd\xd4\x3d\xd6\x79\xc4\x4a\xc0\x81\xb8\x48\xb2\x33\xe4\x71\xd8\x56\x58\x72\x12\xd8\xd0\xb3\x00\xeb\x14\x25\xde\x19\x4a\x07\xb2\xb7\xc4\x14\x86\x5f\x85\x74\x96\xbd\x33\xad\x41\x4b\x0b\xd6\xec\xa4\x80\x78\x58\x52\x7c\x94\xa1\xb2\x24\xc9\x02\xee\xdc\x83\xac\x49\x75\x86\xde\xde\x8e\x58\xaa\xff\x6e\x73\xfd\x44\xb2\xe3\xa9\xcb\xb4\x17\xb5\x3f\x00\x0a\xc7\x17\x01\x60\x74\xa3\xf9\x68\x05\xb2\xed\x04\x14\x79\x9e\x37\x8b\x60\x43\x8d\xf3\xcf\x02\x3e\xe4\xf9\xad\xde\xc7\x3d\xfd\xe8\x28\x9c\xa6\x9f\x62\xaf\xf6\xec\xbf\x0c\x7b\xbb\xb4\xd5\xbf\x6a\xbf\xaa\xec\xf2\x24\xf9\x72\xc7\xa5\x9e\x2c\x3f\xa2\x36\xe4\x77\xd4\xe9\xc2\x0f\x77\xa8\xa8\xc4\xce\xf0\x22\xfb\xea\x7b\x37\xf7\x9e\x0e\xe7\xee\x6d\xe8\x9f\xce\x6f\x8c\x43\xf5\xb9\x27\xef\xb5\x5a\x2e\x65\x28\x84\xda\x92\x5f\xc4\x12\xd0\x0d\x56\x87\xe7\x78\xf1\x9c\x8e\xf3\x78\xd7\x31\x79\xd1\xe7\x69\x91\xae\x16\xd3\x4f\x93\x8d\x90\x84\xc7\x99\x17\xc9\x13\x86\x9c\x36\xe5\x9c\xe9\xcb\xfd\x16\x47\xe6\x9c\x33\x68\x61\xf1\xb9\x42\xab\xfc\x56\xff\x0e\x00\x00\xff\xff\x13\xcd\x3b\xdd\xb7\x06\x00\x00")

func pkgTemplatesRancherLoggingYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesRancherLoggingYaml,
		"pkg/templates/rancher-logging.yaml",
	)
}

func pkgTemplatesRancherLoggingYaml() (*asset, error) {
	bytes, err := pkgTemplatesRancherLoggingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/rancher-logging.yaml", size: 1719, mode: os.FileMode(420), modTime: time.Unix(1713401139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesRancherMonitoringYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6f\xe4\x44\x10\xbd\xfb\x57\x94\x72\x45\xfe\xca\x60\x96\xed\x1b\x44\x10\x71\x08\x48\x04\x96\xe3\xaa\xd2\xae\x8c\x5b\xf4\x17\xdd\x6d\x2b\x21\xec\x7f\x47\xed\x6f\xcf\x78\x76\xb5\xe4\xc0\xe6\x62\xa5\xab\xea\x4d\xd5\xab\xf7\xba\xd1\x8a\x77\xe4\xbc\x30\x9a\x41\x83\xae\x23\x1f\xc8\x35\x5c\x64\xc2\xe4\x5d\xf9\x40\x01\xcb\xe4\x4f\xa1\x6b\x06\xdf\xd5\xb5\xd1\x89\xa2\x80\x35\x06\x64\x09\x80\x46\x45\x0c\x1c\x6a\xde\x90\x4b\x95\xd1\x22\x18\x27\xf4\x71\x0c\x79\x8b\x9c\x18\x70\x0c\x41\xd2\x2a\x9c\xfa\x67\x1f\x48\x25\xde\x12\x8f\x30\x8e\xac\x61\xd0\x84\x60\x59\x9e\xcf\x3d\xa4\x5c\xb6\xfd\x37\x86\xb3\x11\x64\xa8\xcc\x7c\xc7\x73\xde\xa0\x0b\x3e\x01\xe8\xa6\xf6\xaf\xca\xe2\x90\x15\xd9\xe1\xab\xd6\x7e\x5d\x65\x87\x32\x2b\xaf\x12\x80\x3e\xef\x42\x97\x2f\x2f\x29\x88\x47\x40\x5d\x43\xd6\x8f\xe7\xa7\x6f\x36\xe6\xbf\x5f\xf2\xe1\xc3\x87\x04\x80\x34\x3e\x48\xaa\x19\xbc\xbc\x7c\x24\x37\xfb\x61\x48\x1b\x6a\xe2\xcf\x90\xf4\x74\x82\xf0\x88\xd2\xd3\x14\xd6\x63\x6e\x87\xb2\x25\x7f\x63\x74\x20\x1d\x18\xfc\x93\x00\x00\xa0\x24\x17\x14\x6a\x3c\x92\x63\xfd\xc9\x0a\x26\xb8\x96\xc6\x33\x6e\xf4\xa3\x38\x4e\x19\x00\x47\x69\x1e\x50\x2e\xff\x47\xae\xbd\x91\x1d\xbd\x0f\x42\x91\x69\x03\x83\x4a\x8d\x51\x4f\xae\x13\x9c\x96\x64\x6b\x22\x6f\x6f\x8b\xb7\x87\xf1\x68\xdd\xc5\xfd\xb8\xbb\xe1\x6f\xe4\x31\x7b\x27\xec\x30\xc5\xd8\xe2\x53\x20\xa7\x51\xfe\xee\x24\x83\xab\xb8\x60\xcf\xf2\x3c\x12\x37\x24\xe6\x68\x45\xde\x95\xf9\x2c\x16\x9f\x5f\x12\x4b\x3e\xb6\xe7\xf3\x5e\x27\xe7\xdb\x4c\x37\x1c\xc5\xae\x73\xeb\xcc\xd3\x73\x7e\xb5\xe9\x72\xe6\x79\xa2\x23\xd2\xdc\xab\xa7\xbc\x2e\x9a\xf9\xdc\x07\xe3\xf0\x48\x6b\xe6\x3a\x23\x5b\x45\x37\x12\x85\xfa\x8d\x94\x95\x18\x36\x61\x00\xbf\xa1\x64\x83\x73\x23\xd1\xfb\x9f\x7b\xb7\x2c\xfa\x96\x46\x1f\x1b\xe3\xf4\x49\x09\x72\x4e\xde\xdf\x99\x9a\xfc\x29\x5a\x0a\xbf\x12\xd6\x7f\x38\x11\xe8\x17\xcd\xe9\x24\x1a\x57\xdb\x3a\x7e\x5e\x16\x43\x7f\xb5\xe4\xc3\x4e\x64\x19\x15\xaa\x5b\x91\x7c\x14\x4b\x0a\x25\x4e\x31\x14\x29\xe3\x9e\x19\x7c\x53\x14\x77\x62\x13\xe1\xb6\x65\x50\x16\x45\xa1\x92\x4f\x35\x32\x81\x94\x17\x41\x06\x8c\xa3\xc3\x47\xd4\x38\x15\xdb\x68\x7c\x1f\x48\xaf\x55\xbb\x67\x0b\x00\x2f\xfe\x26\x06\xd7\xab\x09\x3f\x6b\x33\xe1\xd9\x12\x03\xdb\xf1\xf9\x64\x77\x4b\xfb\xfb\xd9\xe1\xf2\x9c\xc9\x7e\xd0\xeb\x2d\x59\x13\x2d\xd5\x86\x96\x3d\x0a\xb7\x34\x6d\xab\xaf\xe7\x6a\xeb\x8c\xa2\xd0\x50\x3b\xd7\x5e\xf6\x7c\x31\x71\x3c\xd7\x6c\x1d\x4f\xf1\x9e\xc2\xe8\x9c\x9f\x74\x20\xd7\xa1\x64\x50\xaa\xcf\xd7\xcf\xae\x4a\x56\xcd\x57\x27\x92\xd8\x17\x50\x8f\xf2\xa6\xba\x00\x52\xbe\xa9\xb6\x04\xce\x9e\xaf\xea\xf3\xd3\xfb\x5e\x2a\x55\x71\x2b\xbe\x5f\xc4\xc2\x1d\x5a\xda\x9d\x74\xd4\xd1\xfd\x89\xf9\xff\xd3\x6d\xf1\xff\x59\xbf\xb8\x15\xaf\xbf\xb9\x86\x99\x63\xfb\x0c\x7e\x14\x92\xc6\x67\x7e\x0a\x7f\x09\x8f\xc4\xca\x02\x51\xe4\x9f\x7a\x22\x96\xf4\x54\x9b\x9a\x52\x7a\x8a\x06\x59\xde\xe0\x57\x5b\xbb\xfc\xf6\x35\xd6\x3e\x14\x77\xe2\xdf\x00\x00\x00\xff\xff\x9c\x95\x65\x6d\xc0\x09\x00\x00")

func pkgTemplatesRancherMonitoringYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesRancherMonitoringYaml,
		"pkg/templates/rancher-monitoring.yaml",
	)
}

func pkgTemplatesRancherMonitoringYaml() (*asset, error) {
	bytes, err := pkgTemplatesRancherMonitoringYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/rancher-monitoring.yaml", size: 2496, mode: os.FileMode(420), modTime: time.Unix(1713401182, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pkgTemplatesVmImportControllerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4f\x4b\x03\x31\x10\xc5\xef\xf9\x14\x8f\xde\x37\x6b\x6f\x92\x9b\x88\x67\x6f\x5e\xcb\x34\x99\x76\x83\xf9\xb3\x24\xd3\x80\xac\xfd\xee\xb2\xdb\xae\x2d\x82\xe8\x69\x42\xde\xfc\xde\xcc\x3c\x1a\xfd\x1b\x97\xea\x73\x32\x18\xa8\x34\xae\xc2\x65\xb0\x5e\xfb\xdc\xb7\xed\x9e\x85\xb6\xea\xdd\x27\x67\xf0\xe4\x5c\x4e\x2a\xb2\x90\x23\x21\xa3\x80\x44\x91\x0d\x5a\xec\x7c\x1c\x73\x91\xce\xe6\x24\x25\x87\xc0\xe5\x2a\xd6\x91\x2c\xdf\xf9\x76\xf5\xa3\x0a\x47\x55\x47\xb6\xb3\x41\xe1\x31\x1b\x0c\x22\xa3\xe9\xfb\x5b\x97\x0d\xa7\xa5\xce\xb2\xb6\x24\x12\xf8\x4a\xea\xda\x6c\x6f\x07\x2a\x52\x15\xd0\xd6\xc5\x37\x0f\x7a\xab\x1f\x37\x0a\x58\xb4\xfb\x89\xbf\x6c\x37\x4d\x1d\xfc\x01\x94\x1c\xf4\x72\x58\x5d\xab\xfe\x66\x77\x2d\xee\x2e\xec\xee\xc6\xe2\x7c\x56\x00\x27\xda\x07\x76\x06\xd3\xf4\x4f\x4e\xbf\x5c\x90\x0b\x3f\x8f\xe7\x50\xf9\x87\xdb\x81\x42\xe5\x55\x4e\xd7\xde\x46\xe1\xc4\xf5\x39\x27\xe1\x24\x06\x9f\x0a\x00\x7c\xa4\x23\x9b\xe5\x09\x08\x1d\x0d\xda\x92\xc1\xf2\x73\x38\x85\x30\xc7\xff\xda\xb8\x14\xef\xf8\xaf\x3c\xbe\x02\x00\x00\xff\xff\x7c\x5e\xf2\xb3\x04\x02\x00\x00")

func pkgTemplatesVmImportControllerYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgTemplatesVmImportControllerYaml,
		"pkg/templates/vm-import-controller.yaml",
	)
}

func pkgTemplatesVmImportControllerYaml() (*asset, error) {
	bytes, err := pkgTemplatesVmImportControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/templates/vm-import-controller.yaml", size: 516, mode: os.FileMode(420), modTime: time.Unix(1713401328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/templates/harvester-seeder.yaml":      pkgTemplatesHarvesterSeederYaml,
	"pkg/templates/nvidia-driver-toolkit.yaml": pkgTemplatesNvidiaDriverToolkitYaml,
	"pkg/templates/pcidevices-controller.yaml": pkgTemplatesPcidevicesControllerYaml,
	"pkg/templates/rancher-logging.yaml":       pkgTemplatesRancherLoggingYaml,
	"pkg/templates/rancher-monitoring.yaml":    pkgTemplatesRancherMonitoringYaml,
	"pkg/templates/vm-import-controller.yaml":  pkgTemplatesVmImportControllerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"harvester-seeder.yaml":      &bintree{pkgTemplatesHarvesterSeederYaml, map[string]*bintree{}},
			"nvidia-driver-toolkit.yaml": &bintree{pkgTemplatesNvidiaDriverToolkitYaml, map[string]*bintree{}},
			"pcidevices-controller.yaml": &bintree{pkgTemplatesPcidevicesControllerYaml, map[string]*bintree{}},
			"rancher-logging.yaml":       &bintree{pkgTemplatesRancherLoggingYaml, map[string]*bintree{}},
			"rancher-monitoring.yaml":    &bintree{pkgTemplatesRancherMonitoringYaml, map[string]*bintree{}},
			"vm-import-controller.yaml":  &bintree{pkgTemplatesVmImportControllerYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
